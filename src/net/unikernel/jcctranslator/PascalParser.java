/* Generated By:JavaCC: Do not edit this line. PascalParser.java */
package net.unikernel.jcctranslator;

public class PascalParser implements PascalParserConstants {

/* PARSER STARTS HERE */

/*every proram ends with EOF*/
  final public String parse() throws ParseException {
    String res="";
    try {
      res = prog();
      jj_consume_token(0);
                 {if (true) return res;}
    } catch (ParseException ex) {

    }
    throw new Error("Missing return statement in function");
  }

/*all program structure*/
  final public String prog() throws ParseException {
    String v_list="";
    String s_list="";
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      v_list = var_list();
    }
    jj_consume_token(BEGIN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WRITE:
      case WRITELN:
      case READ:
      case READLN:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      s_list = stmt_list();
    }
    jj_consume_token(END);
    jj_consume_token(DOT);
     {if (true) return v_list + "{\u005cn" + s_list + "}";}
    throw new Error("Missing return statement in function");
  }

/*var body */
  final public String var_list() throws ParseException {
    String i_list = "";
    String tp = "";
    label_3:
    while (true) {
      i_list = id_list();
      jj_consume_token(COLON);
      tp = type();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
     {if (true) return tp + " " + i_list + " = 0;\u005cn";}
    throw new Error("Missing return statement in function");
  }

/*types*/
  final public String type() throws ParseException {
    Token t = new Token();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case REAL:
      t = jj_consume_token(REAL);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (t.toString().toLowerCase().equals("integer"))
            {if (true) return "int";}
        else
            {if (true) return "double";}
    throw new Error("Missing return statement in function");
  }

/* ids seperated by comma (for initialization for example) */
  final public String id_list() throws ParseException {
    String i_list = "";
    Token cma = null;
    Token id = new Token();
    id = jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      cma = jj_consume_token(COMMA);
      i_list = id_list();
    }
     {if (true) return id.toString()+((cma!=null)?cma.toString():"")+i_list;}
    throw new Error("Missing return statement in function");
  }

/*list of statements */
  final public String stmt_list() throws ParseException {
    String stm = "";
    String res = "";
    label_5:
    while (true) {
      stm = stmt();
                   res+=stm+";\u005cn";
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WRITE:
      case WRITELN:
      case READ:
      case READLN:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
    }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

/*statement (shit that ends with semicolon)*/
  final public String stmt() throws ParseException {
    Token t1 = null;
    String res = "";
    String bdy = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t1 = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      res = exp();
                                                             {if (true) return t1.toString()+" = " + res;}
      break;
    case WRITE:
    case WRITELN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
        t1 = jj_consume_token(WRITE);
        break;
      case WRITELN:
        t1 = jj_consume_token(WRITELN);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      res = exp();
      jj_consume_token(RPAREN);
                                                                    {if (true) return "System.out.print"+(t1.toString().equals("write")?"":"ln")+"("+ res +")";}
      break;
    case READ:
    case READLN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
        t1 = jj_consume_token(READ);
        break;
      case READLN:
        t1 = jj_consume_token(READLN);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      res = id_list();
      jj_consume_token(RPAREN);
                                                                      {if (true) return "System.out.read"+(t1.toString().equals("read")?"":"ln")+"("+ res +")";}
      break;
    case FOR:
      jj_consume_token(FOR);
      res = for_index_exp();
      jj_consume_token(DO);
      bdy = body();
                                                     {if (true) return "for("+res+")\u005cn"+bdy;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) throw new Error("Couldnt find any statement for translation.");}
    throw new Error("Missing return statement in function");
  }

/* variable or numeric value */
  final public String numeric_val() throws ParseException {
    Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

/* simple expression with binary operator */
  final public String exp() throws ParseException {
    Token op = null;
    String s1 = "";
    String s2 = "";
    s1 = numeric_val();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        op = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        op = jj_consume_token(DIVIDE);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = numeric_val();
                                                                                                                   {if (true) return s1 + " " + op.toString() + " " + s2;}
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

/*expression for "for" loop */
  final public String for_index_exp() throws ParseException {
    Token id = null;
    String xp1 = "";
    String xp2 = "";
    id = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    xp1 = exp();
    jj_consume_token(TO);
    xp2 = exp();
     {if (true) return id.toString() + " = " + xp1 + ";" + id.toString() + "<" + xp2 + ";" + id.toString() + "++";}
    throw new Error("Missing return statement in function");
  }

/*Body for some loops and other stuff (begin ... end) */
  final public String body() throws ParseException {
    String s="";
    jj_consume_token(BEGIN);
    s = stmt_list();
    jj_consume_token(END);
     {if (true) return "{\u005cn" + s + "}";}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PascalParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x7c400000,0x40000000,0xc0000,0x200,0x7c400000,0xc000000,0x30000000,0x7c400000,0x40000000,0x7c00,0x7c00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PascalParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PascalParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PascalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PascalParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PascalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PascalParser(PascalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PascalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
